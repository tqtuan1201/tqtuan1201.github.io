<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>App Architecture on Tuan Truong&#39;s Blog</title>
    <link>https://tqtuan1201.github.io/tags/app-architecture/</link>
    <description>Recent content in App Architecture on Tuan Truong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Mar 2021 13:11:55 +0700</lastBuildDate><atom:link href="https://tqtuan1201.github.io/tags/app-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Natural Language Processing On Ios Application Implement Viper Clean Architecture In An Ios App</title>
      <link>https://tqtuan1201.github.io/posts/nlp-on-ios-application-viper-arch/</link>
      <pubDate>Fri, 19 Mar 2021 13:11:55 +0700</pubDate>
      
      <guid>https://tqtuan1201.github.io/posts/nlp-on-ios-application-viper-arch/</guid>
      <description>Abstract Xây dựng ứng dụng iOS với kiến trúc VIPER về dự đoán tác giả bài thơ. Input đầu vào là một đoạn text đoạn thơ người dùng nhập vào và output là tác giả của đoạn thơ đó. Ví dụ: INPUT = Sao anh không về chơi thôn Vĩ? → OUTPUT = Hàn Mặc Tử
  Tìm hiểu về Bag of Words, Turi Create. Xây dựng ứng dụng iOS trên kiến trúc VIPER Clean Architecture Một số từ khóa liên quan: Bag of Word, Logictic Classifier, Turi Create VIPER, iOS Application     Đặt Vấn Đề INPUT STRING:</description>
    </item>
    
    <item>
      <title>The VIPER Architecture</title>
      <link>https://tqtuan1201.github.io/posts/my-first-post/</link>
      <pubDate>Mon, 01 Mar 2021 15:58:30 +0700</pubDate>
      
      <guid>https://tqtuan1201.github.io/posts/my-first-post/</guid>
      <description>Architecture Just like MVC or MVVM, VIPER is a design pattern created to facilitate the development by creating layers of abstraction and isolation of concerns, creating a cleaner code, and bringing more maintainability further down the road
VIPER is an acronym for View-Interactor-Presenter-Entity-Router. Each functionality or module must be defined by these five components.
View It’s what the user sees, the view that represents a functionality. In some cases, a single functionality can have multiple views, for example, an onboarding flow with multiple steps.</description>
    </item>
    
  </channel>
</rss>
